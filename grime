#!/bin/bash
#--------------------Author:ekahPruthvi--------------------#

#-----------------init------------------------#
cd ~/
flag=1

#-----------------files&folders---------------#
fnf() {
    local hide="$1"
    if [ "$hide" = 1 ]; then
        folders=$(ls -d */)
        files=$(ls -p | grep -v /)
    else
        folders=$(ls -Ap | grep / | grep "^.")
        files=$(ls -Ap | grep -v / | grep "^.")
    fi
}

#--------------------icons--------------------#

file_icon_exp(){
    local w=0
    local wc=$start_wc
    while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
        printf  "$1\t"
        ((w++))
        ((wc++))
    done
    echo
}

file_icon(){
    for word in "${file_array[@]}"; do
        printf  "$1\t"
    done
    echo
}

folder_icon_exp(){
    local w=0
    local wc=$start_fwc
    while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
        printf  "$1\t"
        ((w++))
        ((wc++))
    done
    echo
}

folder_icon(){
    for fword in "${folder_array[@]}"; do
        printf  "$1\t"
    done
    echo
}

show(){
    echo
    fnf "$flag"
    if [ "$1" = 1 ]; then
        readarray -t file_array <<<"$folders"
    else
       readarray -t file_array <<<"$files" 
    fi

    local num=${#file_array[@]}
    local win_width=$(tput cols)
    local max_lines=$(( (num / (win_width / 15)) + 1 ))
    local cur_num=$num
    local files_in_line=$(( (win_width / 15) - 1 ))

    #printf "$win_width\n$max_lines\n$num\n" #testing
    if [ "$1" = 1 ]; then 
        echo "[$PWD]"
        echo
        if [[ $(( win_width / 15 )) -gt "$num"  ]]; then 
            file_icon "╔█▀▀▀▀▀▄"
            file_icon "║█     █"
            file_icon "║█     █"
            file_icon "║█▄▄▄▄▄█"
            file_icon "╚══════╝"
            for word in "${file_array[@]}"; do
                printf  "%-15.15s " "/$word"
            done
        else 
            start_wc=0
            local w=0
            local wc=0
            for (( i=1 ; i<=$max_lines ; i++ )); do
                file_icon_exp "╔█▀▀▀▀▀▄"
                file_icon_exp "║█     █"
                file_icon_exp "║█     █"
                file_icon_exp "║█▄▄▄▄▄█"
                file_icon_exp "╚══════╝"
                w=0
                wc=$start_wc
                while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
                    printf  "%-15.15s " "/${file_array[$wc]}"
                    ((w++))
                    ((wc++))
                done
                #echo "$w $files_in_line $wc $num" #testing
                start_wc=$wc
                echo 
                echo
            done
        fi
    else
        if [[ $(( win_width / 15 )) -gt "$num"  ]]; then 
            file_icon "╔█▀▀▀▀▀▄"
            file_icon "║█     █"
            file_icon "║█#####█"
            file_icon "║█▄▄▄▄▄█"
            file_icon "╚══════╝"
            for word in "${file_array[@]}"; do
                printf  "%-15.15s " "-$word"
            done
        else 
            start_wc=0
            local w=0
            local wc=0
            for (( i=1 ; i<=$max_lines ; i++ )); do
                file_icon_exp "╔█▀▀▀▀▀▄"
                file_icon_exp "║█     █"
                file_icon_exp "║█#####█"
                file_icon_exp "║█▄▄▄▄▄█"
                file_icon_exp "╚══════╝"
                w=0
                wc=$start_wc
                while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
                    printf  "%-15.15s " "-${file_array[$wc]}"
                    ((w++))
                    ((wc++))
                done
                start_wc=$wc
                echo 
                echo
            done
        fi
    fi
}

#--------------------menu--------------------#
while true; do
    read -rsn1 input
    if [ "$input" = "a" ]; then
        clear
        show 1
        echo
        echo
        show 0
    elif [ "$input" = "h" ]; then
        clear
        if [[ "$flag" -eq 1 ]]; then
            echo "hide toggle off"
            flag=0
        else
            echo "hide toggle on"
            flag=1
        fi
    elif [ "$input" = "s" ]; then
        clear
        read -s complete
        echo "$complete"
    elif [ "$input" = "q" ]; then
        clear
        break
    fi
done