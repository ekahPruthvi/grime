#!/bin/bash
#--------------------Author:ekahPruthvi--------------------#

#-----------------init------------------------#
cd ~/

flag=1
win_size=$( tput lines )
max_rows=0

tput civis
printf '\033[2J\033[3J\033[1;1H'
printf "$color"

#-----------------backend---------------#
clear_win() {
    printf '\033[2J\033[3J\033[1;1H'
}

fnf() {
    local hide="$1"
    if [ "$hide" = 1 ]; then
        folders=$(ls -d */)
        files=$(ls -p | grep -v /)
    else
        folders=$(ls -Ap | grep / | grep "^.")
        files=$(ls -Ap | grep -v / | grep "^.")
    fi
}

make_window() {
    tput cup 0 0 
    local COL=$( tput cols )
    local ROW=$( tput lines )
    #printf "$COL"
    printf "┌"
    for (( i=1 ; i<( $COL - 1 ) ; i++ )); do
        printf "─"
    done
    printf "┐\n"
    for (( i=1 ; i<( $ROW - 2 ); i++ )); do
         printf "│" 
         tput cup $i $COL
         printf "│\n"
    done
    printf "└"
    for (( i=1 ; i<( $COL - 1 ) ; i++ )); do
        printf "─"
    done
    printf "┘"
    tput cup 0 3
    printf "~grime~"
    tput cup 1 1
}

#taken from basil
Fillaform(){
    local ROW=$(tput lines)  
    local lineno="$#"
    local max=50
    for i in "$@"
    do      
        local temp="$i"
        local wc=${#temp}
        if [ "$wc" -gt "$max" ]
        then
            max="$wc"
        fi
    done
    max=$(($max+5))
    local fwidth=$(tput cols)
    local fpadding=$(( (fwidth - ${max}) / 2 ))
    local fendpad=$((( (fwidth - ${max}) / 2 )-1))
    local cont=0
    echo ""
    echo ""
    tput cup $(( (ROW / 2) - 7 ))
    local nline=$(( (ROW / 2) - 7 ))
    for i in "$@"
    do
        local finstartpadd=2
        local finendpadd=2
        temp="$i"
        local end="║"
        if [ "$cont" -eq 0 ]
        then
            end="╗"
            
        fi
        cont=$(($cont+1))
        wc=${#temp}
        finendpadd=$(( ($max-$wc)-5 ))
        tput cup $nline $fpadding
        printf " %${finstartpadd}s\033[7m %s%${finendpadd}s\033[0m" "" "$temp"
        echo "$end"
        ((nline++))
        local fline="╚"
        if [ "$cont" -eq "$lineno" ]
        then 
            tput cup $nline $(( $fpadding + 2))
            for f in $(seq 1 "$((max - 2 ))" )
            do
                if [ "$f" -eq "$(( max - 2 ))" ]
                then
                    fline="╝"
                fi
                printf "$fline"
                fline="═"
            done
        fi
    done
}

file_icon_exp(){
    local w=0
    local wc=$start_wc
    while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
        printf  "  $1\t"
        ((w++))
        ((wc++))
    done
    echo
}

file_icon(){
    for word in "${file_array[@]}"; do
        printf  "  $1\t"
    done
    echo
}


show(){
    echo
    fnf "$flag"
    if [ "$1" = 1 ]; then
        readarray -t file_array <<<"$folders"
    else
       readarray -t file_array <<<"$files" 
    fi

    local num=${#file_array[@]}
    local width=$(tput cols)
    local win_width=$(( width - 2 ))
    local max_lines=$(( (num / (win_width / 15)) + 1 ))
    local cur_num=$num
    local files_in_line=$(( (win_width / 15) - 1 ))
    max_rows=$(( $max_rows + $max_lines ))

    #printf "$win_width\n$max_lines\n$num\n" #testing
    if [ "$1" = 1 ]; then 
        echo "  [$PWD]"
        echo
        if [[ $(( win_width / 15 )) -gt "$num"  ]]; then 
            file_icon "╔▒▀▀▀▒▒▒"
            file_icon "║███████"
            file_icon "║███████"
            file_icon "╚══════╝"
            printf "  "
            for word in "${file_array[@]}"; do
                printf  "%-15.15s " "/$word"
            done
        else 
            start_wc=0
            local w=0
            local wc=0
            for (( i=1 ; i<=$max_lines ; i++ )); do
                file_icon_exp "╔▒▀▀▀▒▒▒"
                file_icon_exp "║███████"
                file_icon_exp "║███████"
                file_icon_exp "╚══════╝"
                w=0
                wc=$start_wc
                printf "  "
                while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
                    printf  "%-15.15s " "/${file_array[$wc]}"
                    ((w++))
                    ((wc++))
                done
                #echo "$w $files_in_line $wc $num" #testing
                start_wc=$wc
                echo 
                echo
            done
        fi
    else
        if [[ $(( win_width / 15 )) -gt "$num"  ]]; then 
            file_icon "╔█▀▀▀▀▀▄"
            file_icon "║█     █"
            file_icon "║█#####█"
            file_icon "║█▄▄▄▄▄█"
            file_icon "╚══════╝"
            printf "  "
            local counter=0
            for word in "${file_array[@]}"; do
                printf  "%-15.15s " "$counter]$word"
                ((counter++))
            done
        else 
            start_wc=0
            local w=0
            local wc=0
            for (( i=1 ; i<=$max_lines ; i++ )); do
                file_icon_exp "╔█▀▀▀▀▀▄"
                file_icon_exp "║█     █"
                file_icon_exp "║█#####█"
                file_icon_exp "║█▄▄▄▄▄█"
                file_icon_exp "╚══════╝"
                w=0
                wc=$start_wc
                printf "  "
                while [ $w -lt $files_in_line ] && [ $wc -lt $num ]; do
                    printf  "%-15.15s " "$wc]${file_array[$wc]}"
                    ((w++))
                    ((wc++))
                done
                start_wc=$wc
                echo 
                echo
            done
        fi
    fi
}


display_seq(){
    clear_win
    show 1
    echo
    echo
    show 0
    if [[ $(( $max_rows * 8 )) -lt "$win_size" ]]; then
        make_window
    fi
}

moveanim(){
    local ROW=$(tput lines)
    clear_win
    local ctext="╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒"
    local cwidth=$(tput cols)
    local cpadding=$(( (cwidth - ${#ctext}) / 2 ))
    for ((i=0;i<1;i++)) do
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████ ▗▗▗      ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████   ▗▗▗    ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████     ▗▗▗  ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████      ▗▗▗ ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████      ▗▗▗ ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████    ▗▗▗   ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████  ▗▗▗     ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔▒▀▀▀▒▒▒          ╔▒▀▀▀▒▒▒\n"
        printf "%${cpadding}s║███████ ▗▗▗      ║███████\n"
        printf "%${cpadding}s║███████          ║███████\n"
        printf "%${cpadding}s╚══════╝          ╚══════╝\n"
        sleep 0.3
    done
}

copyanim(){
    local ROW=$(tput lines)
    clear_win
    local ctext="   █▀▀▀▀▀▄"
    local cwidth=$(tput cols)
    local cpadding=$(( (cwidth - ${#ctext}) / 2 ))
    for ((i=0;i<3;i++)) do
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l╔█▀▀▀▀▀▄\n"
        printf "%${cpadding}s║█     █\n"
        printf "%${cpadding}s║█#####█\n"
        printf "%${cpadding}s║█▄▄▄▄▄█\n"
        printf "%${cpadding}s╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l  █▀▀▀▀▀▄\n"
        printf "%${cpadding}s╔═█     █\n"
        printf "%${cpadding}s║ █#####█\n"
        printf "%${cpadding}s║ █▄▄▄▄▄█\n"
        printf "%${cpadding}s║      ║\n"
        printf "%${cpadding}s╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l   █▀▀▀▀▀▄\n"
        printf "%${cpadding}s╔═════─┐ █\n"
        printf "%${cpadding}s║  █###│#█\n"
        printf "%${cpadding}s║  █▄▄▄║▄█\n"
        printf "%${cpadding}s║      ║\n"
        printf "%${cpadding}s╚══════╝\n"
        sleep 0.3
        clear
        tput cup $(( (ROW / 2) - 4 ))
        printf "%${cpadding}s\033[?25l  █▀▀▀▀▀▄\n"
        printf "%${cpadding}s╔═════─┐█\n"
        printf "%${cpadding}s║ █####│█\n"
        printf "%${cpadding}s║ █▄▄▄▄║█\n"
        printf "%${cpadding}s║      ║\n"
        printf "%${cpadding}s╚══════╝\n"
        sleep 0.3
    done
}

Flap-Travel(){
    fileanim=2
    if [ $# -lt 2 ]; then
        echo "penguin asks where to move to?" && sleep 2s
    else
        for i in $@; do
            if [ -e $i ] || [ $i = "~/" ]; then
                fileanim=0
                continue
            else
                echo "penguin don't think it exits : $i " && sleep 2s
                fileanim=1
                break
            fi
        done
        if [ "$fileanim" -eq 0 ]; then
            mv $@ 2> /dev/null
        fi
    fi
}

Waddle-Name(){
    local flag=2
    if [ $# -ne 2 ]; then
        echo "Enter the file/directory followed by the new name" && sleep 2s
    else
        if [ -e $1 ]; then
            flag=0
            continue
        else
            echo "penguin don't think it exits : $1 " && sleep 2s
            flag=1
            break
        fi
        if [ "$flag" -eq 0 ]; then
            mv $@ 2> /dev/null
        fi
    fi
}

Fish-Borrow(){
    local flag=1
    eval last=\${$#}
    if [ -f $last ]; then
        max_rows=0
        display_seq
        tput cup $(( $ll - 2 )) 3
        printf " penguin asks if you want to rewrite (Y/n) : "
        read choice
        if [ "$choice" = "y" ] || [ "$choice" = "Y" ] || [ "$choice" = "" ]; then
            echo "rewriting $last"
            flag=1
        else
            flag=0
            return 
        fi
    else 
        flag=1
    fi
    if [ $# -lt 2 ]; then
        echo "penguin says invalid input," 
        echo "give atleast souce file/directory and destination file/directory"
    else
        for i in $@; do
            if [ -e $i ] || [ "$i" = "$last" ]; then
                continue
            else
                echo "penguin don't think $i exits"
                break
            fi
        done
        if [ "$flag" -eq 1 ]; then
            cp $@ 2> /dev/null
            copyanim
        fi
    fi
}

Snow-Sweep(){
    echo
}

Belly-Flop(){ 
    echo 
}

startup(){
    local ROW=$(tput lines)
    clear_win
    tput cup $(( (ROW / 2) - 4 ))
cat << "EOF"
    __        
 -=(o '.
    '.-.\
    /|  \\      ░▒█▀▀█░█▀▀▄░░▀░░█▀▄▀█░█▀▀░░░░░
    '|  ||      ░▒█░▄▄░█▄▄▀░░█▀░█░▀░█░█▀▀░▄▄░░
    _\_):,_     ░▒█▄▄▀░▀░▀▀░▀▀▀░▀░░▒▀░▀▀▀░▀▀░░

EOF
    make_window
    sleep 1s 
    max_rows=0 
    display_seq 
    prev=$(echo $PWD)
    chk="no"
}

#--------------------main--------------------#
startup

while true; do
    read -rsn1 input

    if [ "$input" = "!" ] && [ "$chk" = "penglin" ] ; then
        input="a"
        chk="no"
    fi

    if [ "$input" = "a" ]; then
        max_rows=0
        display_seq
        prev=$(echo $PWD)
    elif [ "$input" = "h" ]; then
        clear_win
        if [[ "$flag" -eq 1 ]]; then
            echo "hide toggle off" && sleep 1s
            flag=0
            max_rows=0
            display_seq
        else
            echo "hide toggle on" && sleep 1s
            flag=1
            max_rows=0
            display_seq
        fi
    elif [ "$input" = "/" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " cd : "
        read dir
        if [ "$dir" = "[]" ]; then
            prev=$(echo $PWD)
            cd ~/
        elif [ "$dir" = "[" ]; then
            cd "$prev"
        else
            prev=$(echo $PWD)
            cd "$dir"
        fi
        max_rows=0
        display_seq
    elif [ "$input" = "m" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " move (enter destination folder at the end) : "
        read bob
        Flap-Travel $bob
        if [ $fileanim -eq 0 ]; then
            moveanim
        fi
        max_rows=0
        display_seq 
    elif [ "$input" = "r" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " rename (enter new name at the end) : "
        read bob
        Waddle-Name $bob
        max_rows=0
        display_seq
    elif [ "$input" = "c" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " copy (enter destination folder at the end) : "
        read bob
        Fish-Borrow $bob
        max_rows=0
        display_seq
    elif [ "$input" = "x" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " DELETE FILES : "
        read bob
        Snow-Sweep $bob
        max_rows=0
        display_seq
    elif [ "$input" = "o" ]; then
        ll=$(tput lines)
        tput cup $(( $ll - 2 )) 3
        printf " Open Files ? : "
        read bob
        Belly-Flop $bob
        max_rows=0
        display_seq
    elif [ "$input" = "!" ]; then
        Fillaform "   " "░█▀▀▀░█▀▀▄░░▀░░█▀▄▀█░█▀▀" "░█░▀▄░█▄▄▀░░█▀░█░▀░█░█▀▀" "░▀▀▀▀░▀░▀▀░▀▀▀░▀░░▒▀░▀▀▀" "keyboard oriented file manager" "   " "-! for this help message" "-a to refresh display" "-h toggle hidden files" "-/ change directory" "-m to move files and folders" "-c to copy files and folders" "-r to rename file of folder" "-q to quit" "   "
        chk="penglin"
    elif [ "$input" = "q" ]; then
        tput cnorm
        clear_win
        break
    fi
done